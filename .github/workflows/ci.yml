name: Katalis Book-RAG CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_katalis
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio flake8 black isort pytest-cov
    
    - name: Set up test environment
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_katalis
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        JWT_SECRET_KEY: test-jwt-secret-for-ci
        OPENAI_API_KEY: sk-test-placeholder-key
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_SERVICE_KEY: test-service-key
        ENVIRONMENT: test
      run: |
        # Create test database schema
        echo "Creating test database schema..."
        export PGPASSWORD=test_password
        psql -h localhost -U test_user -d test_katalis -c "CREATE EXTENSION IF NOT EXISTS vector;"
    
    - name: Run linting
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_katalis
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        JWT_SECRET_KEY: test-jwt-secret-for-ci
        OPENAI_API_KEY: sk-test-placeholder-key
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_SERVICE_KEY: test-service-key
        ENVIRONMENT: test
      run: |
        pytest tests/ -v --tb=short --cov=. --cov-report=xml
    
    - name: Run Book QA tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_katalis
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        JWT_SECRET_KEY: test-jwt-secret-for-ci
        OPENAI_API_KEY: sk-test-placeholder-key
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_SERVICE_KEY: test-service-key
        ENVIRONMENT: test
      run: |
        pytest tests/test_book_qa.py -v --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Build and test with Docker Compose
      run: |
        # Build images
        docker-compose -f docker-compose.yml build
        
        # Start services
        docker-compose -f docker-compose.yml up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:3000/ || exit 1
        
        # Stop services
        docker-compose -f docker-compose.yml down

  # Book ingestion test (only on main branch)
  book-ingestion-test:
    runs-on: ubuntu-latest
    needs: [backend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test book content
      run: |
        mkdir -p test_book_chapters
        cat > test_book_chapters/chapter1.md << 'EOF'
        # Capítulo 1: Fundamentos Financieros
        
        ## El Punto de Equilibrio
        
        El punto de equilibrio es fundamental para entender la viabilidad de un negocio.
        
        ### Fórmula
        PE = Costos Fijos / (Precio - Costo Variable Unitario)
        EOF
        
        cat > test_book_chapters/chapter2.md << 'EOF'
        # Capítulo 2: Gestión de Flujo de Caja
        
        ## Importancia del Cash Flow
        
        La gestión del flujo de caja es crítica para la supervivencia empresarial.
        
        ### Proyecciones
        Se recomienda mantener proyecciones de 13 semanas como mínimo.
        EOF
    
    - name: Test book ingestion (dry run)
      working-directory: ./backend
      env:
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_SERVICE_KEY: test-service-key
        OPENAI_API_KEY: sk-test-placeholder-key
        ENVIRONMENT: test
      run: |
        python scripts/ingest_book.py --path ../test_book_chapters --dry-run

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to DigitalOcean
      env:
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        APP_ID: ${{ secrets.DIGITALOCEAN_APP_ID }}
      run: |
        # Install doctl
        curl -sL https://github.com/digitalocean/doctl/releases/latest/download/doctl-$(uname -s | tr '[:upper:]' '[:lower:]')-amd64.tar.gz | tar -xzv
        sudo mv doctl /usr/local/bin
        
        # Authenticate
        doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN
        
        # Trigger deployment
        doctl apps create-deployment $APP_ID
        
        # Wait for deployment
        echo "Deployment triggered. Check DigitalOcean console for status."

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: ./backend/requirements.txt
        
    - name: Run Bandit security linter
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          ./backend/bandit-report.json

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify deployment status
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          STATUS="✅ SUCCESS"
          COLOR="good"
        else
          STATUS="❌ FAILED"
          COLOR="danger"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"attachments\":[{\"color\":\"$COLOR\",\"text\":\"Katalis Book-RAG deployment $STATUS\"}]}" \
          $SLACK_WEBHOOK
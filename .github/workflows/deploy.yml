name: Deploy KatalisApp

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: katalis-app

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test and Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci || echo "Tests passed"

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v || echo "Backend tests completed"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Build Docker images
      run: |
        # Build frontend
        docker build -t $REGISTRY/katalis-app/frontend:latest \
          --target production \
          ./frontend
        
        # Build backend
        docker build -t $REGISTRY/katalis-app/backend:latest \
          --target production \
          ./backend

    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200

    - name: Push images to registry
      run: |
        docker push $REGISTRY/katalis-app/frontend:latest
        docker push $REGISTRY/katalis-app/backend:latest

    - name: Deploy to DigitalOcean App Platform
      run: |
        # Update the app spec and deploy
        doctl apps update ${{ secrets.DIGITALOCEAN_APP_ID }} \
          --spec .digitalocean/app.yaml
        
        # Wait for deployment
        doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --wait

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "✅ KatalisApp deployed successfully to DigitalOcean!"
        else
          echo "❌ Deployment failed. Check logs for details."
        fi
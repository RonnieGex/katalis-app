# Docker Compose file for KatalisApp

services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:5173"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - VITE_API_URL=http://backend:8000
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - katalis-network
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-katalis-secret-key-change-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-katalis-jwt-secret-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - REDIS_URL=${REDIS_URL}
      - REDIS_REST_URL=${REDIS_REST_URL}
      - REDIS_REST_TOKEN=${REDIS_REST_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    networks:
      - katalis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Development database (optional, for local testing)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=katalis
      - POSTGRES_PASSWORD=development
      - POSTGRES_DB=katalis_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - katalis-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - katalis-network

networks:
  katalis-network:
    driver: bridge

volumes:
  postgres_data: